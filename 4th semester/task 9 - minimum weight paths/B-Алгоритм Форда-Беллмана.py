"""
Дан ориентированный взвешенный граф и номер стартовой вершины. Вершины нумеруются с нуля.
Необходимо определить кратчашие расстояния от неё до остальных вершин.

Формат входных данных
На вход программе в первой строке подается три числа через пробел: n , m , s .

2 ≤ n ≤ 1000 - число вершин в графе
1 ≤ m ≤ 1000 - число рёбер
s - номер начальной вершины
В следующих m строках задаются рёбра. Ребро (дуга) задаётся тремя числами через пробел:

Начало ребра
Конец ребра
Вес ребра
Вес ребра - целое число, по модулю не превышаюшее 1000.

Формат выходных данных
Необходимо вывести строку из n элементов через пробел - расстояния до вершин из заданной.
Если расстояние до какой-то вершины не определено, то выведите вместо этого расстояния строку UDF .
"""
n, m, s = input().split()
n, m, s = int(n), int(m), int(s)

gr = []

for i in range(m):
    u, v, w = input().split()
    u, v, w = int(u), int(v), int(w)
    gr.append([u, v, w])

inf = 10 ** 10
d = [inf] * n
d[s] = 0
for i in range(n - 1):
    for u, v, w in gr:
        if d[u] != inf and d[u] + w < d[v]:
            d[v] = d[u] + w
for u, v, w in gr:
    if d[u] != inf and d[u] + w < d[v]:
        d[v] = -inf

for i in range(len(d)):
    if d[i] >= 10000000000 or d[i] <= -10000000000:
        d[i] = 'UDF'

print(*d)

